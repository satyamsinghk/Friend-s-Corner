{"version":3,"file":"static/js/178.d680fd4d.chunk.js","mappings":"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","sources":["Post/Post.jsx"],"sourcesContent":["import React from \"react\";\n\nimport {\n  Button,\n  Container,\n  Text,\n  Title,\n  Modal,\n  TextInput,\n  Group,\n  Card,\n  ActionIcon,\n  // Code,\n} from \"@mantine/core\";\nimport { useState, useRef, useEffect } from \"react\";\nimport { MoonStars, Sun, Trash } from \"tabler-icons-react\";\n\nimport {\n  MantineProvider,\n  ColorSchemeProvider,\n  // ColorScheme,\n} from \"@mantine/core\";\n// import { useColorScheme } from \"@mantine/hooks\";\nimport { useHotkeys, useLocalStorage } from \"@mantine/hooks\";\n\nexport default function Post() {\n  const [tasks, setTasks] = useState([]);\n  const [opened, setOpened] = useState(false);\n\n  // const preferredColorScheme = useColorScheme();\n  const [colorScheme, setColorScheme] = useLocalStorage({\n    key: \"mantine-color-scheme\",\n    defaultValue: \"light\",\n    getInitialValueInEffect: true,\n  });\n  const toggleColorScheme = (value) =>\n    setColorScheme(value || (colorScheme === \"dark\" ? \"light\" : \"dark\"));\n\n  useHotkeys([[\"mod+J\", () => toggleColorScheme()]]);\n\n  const taskTitle = useRef(\"\");\n  const taskSummary = useRef(\"\");\n\n  function createTask() {\n    setTasks([\n      ...tasks,\n      {\n        title: taskTitle.current.value,\n        summary: taskSummary.current.value,\n      },\n    ]);\n\n    saveTasks([\n      ...tasks,\n      {\n        title: taskTitle.current.value,\n        summary: taskSummary.current.value,\n      },\n    ]);\n  }\n\n  function deleteTask(index) {\n    var clonedTasks = [...tasks];\n\n    clonedTasks.splice(index, 1);\n\n    setTasks(clonedTasks);\n\n    saveTasks([...clonedTasks]);\n  }\n\n  function loadTasks() {\n    // let loadedTasks = localStorage.getItem(\"tasks\");\n    // console.log(loadTasks);\n    let loadedTasks = localStorage.getItem(\"tasks\");\n    console.log(loadedTasks);\n    let tasks = JSON.parse(loadedTasks);\n    console.log(tasks);\n\n    if (tasks) {\n      setTasks(tasks);\n    }\n  }\n\n  function saveTasks(tasks) {\n    localStorage.setItem(\"tasks\", JSON.stringify(tasks));\n  }\n\n  useEffect(() => {\n    loadTasks();\n  }, []);\n\n  return (\n    <ColorSchemeProvider\n      colorScheme={colorScheme}\n      toggleColorScheme={toggleColorScheme}\n    >\n      <MantineProvider\n        theme={{ colorScheme, defaultRadius: \"md\" }}\n        withGlobalStyles\n        withNormalizeCSS\n      >\n        <div className=\"App\">\n          <Modal\n            opened={opened}\n            size={\"md\"}\n            title={\"New Plan\"}\n            withCloseButton={false}\n            onClose={() => {\n              setOpened(false);\n            }}\n            centered\n          >\n            <TextInput\n              mt={\"md\"}\n              ref={taskTitle}\n              placeholder={\"Plan Title\"}\n              required\n              label={\"Title\"}\n            />\n            <TextInput\n              ref={taskSummary}\n              mt={\"md\"}\n              placeholder={\"Summary\"}\n              label={\"Summary\"}\n            />\n            <Group mt={\"md\"} position={\"apart\"}>\n              <Button\n                onClick={() => {\n                  setOpened(false);\n                }}\n                variant={\"subtle\"}\n              >\n                Cancel\n              </Button>\n              <Button\n                onClick={() => {\n                  createTask();\n                  setOpened(false);\n                }}\n              >\n                Create Plan\n              </Button>\n            </Group>\n          </Modal>\n          <Container size={550} my={40}>\n            <Group position={\"apart\"}>\n              <Title\n                sx={(theme) => ({\n                  fontFamily: `Greycliff CF, ${theme.fontFamily}`,\n                  fontWeight: 600,\n                })}\n              >\n                Plan's to do with Friends\n              </Title>\n              <ActionIcon\n                color={\"blue\"}\n                onClick={() => toggleColorScheme()}\n                size=\"lg\"\n              >\n                {colorScheme === \"dark\" ? (\n                  <Sun size={16} />\n                ) : (\n                  <MoonStars size={16} />\n                )}\n              </ActionIcon>\n            </Group>\n            {tasks.length > 0 ? (\n              // eslint-disable-next-line\n              tasks.map((task, index) => {\n                if (task.title) {\n                  return (\n                    <Card withBorder key={index} mt={\"sm\"}>\n                      <Group position={\"apart\"}>\n                        <Text weight={\"bold\"}>{task.title}</Text>\n                        <ActionIcon\n                          onClick={() => {\n                            deleteTask(index);\n                          }}\n                          color={\"red\"}\n                          variant={\"transparent\"}\n                        >\n                          <Trash />\n                        </ActionIcon>\n                      </Group>\n                      <Text color={\"dimmed\"} size={\"md\"} mt={\"sm\"}>\n                        {task.summary\n                          ? task.summary\n                          : \"No summary was provided for this task\"}\n                      </Text>\n                    </Card>\n                  );\n                }\n              })\n            ) : (\n              <Text size={\"lg\"} mt={\"md\"} color={\"dimmed\"}>\n                You don't have any plans for now.\n              </Text>\n            )}\n            <Button\n              onClick={() => {\n                setOpened(true);\n              }}\n              fullWidth\n              mt={\"md\"}\n            >\n              New Plans\n            </Button>\n          </Container>\n        </div>\n      </MantineProvider>\n    </ColorSchemeProvider>\n  );\n}\n"],"names":["Post","useState","tasks","setTasks","opened","setOpened","useLocalStorage","key","defaultValue","getInitialValueInEffect","colorScheme","setColorScheme","toggleColorScheme","value","useHotkeys","taskTitle","useRef","taskSummary","saveTasks","localStorage","setItem","JSON","stringify","useEffect","loadedTasks","getItem","console","log","parse","loadTasks","theme","defaultRadius","withGlobalStyles","withNormalizeCSS","className","size","title","withCloseButton","onClose","centered","mt","ref","placeholder","required","label","position","onClick","variant","current","summary","my","sx","fontFamily","fontWeight","A","color","length","map","task","index","withBorder","weight","clonedTasks","splice","deleteTask","fullWidth"],"sourceRoot":""}